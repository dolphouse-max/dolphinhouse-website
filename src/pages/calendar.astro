---
import Layout from "../layouts/Layout.astro";
---
<Layout title="Admin Calendar | Dolphin House">

  <section class="max-w-7xl mx-auto py-8">
    <div class="flex items-center justify-between mb-6">
      <h1 class="text-2xl font-bold">ðŸ“… Availability Calendar</h1>
      <div class="flex items-center gap-2">
        <button id="prevRange" class="px-3 py-1 border rounded">â—€ Prev</button>
        <select id="rangeDays" class="border px-2 py-1 rounded">
          <option value="7">7 days</option>
          <option value="14" selected>14 days</option>
          <option value="30">30 days</option>
        </select>
        <button id="nextRange" class="px-3 py-1 border rounded">Next â–¶</button>
        <input id="fromDate" type="date" class="border px-2 py-1 rounded ml-3" />
        <button id="refreshBtn" class="ml-2 px-3 py-1 bg-sky-600 text-white rounded">Refresh</button>
      </div>
    </div>

    <div id="calendarWrap" class="overflow-x-auto border rounded-lg bg-white shadow p-4">
      <div id="calendarGrid" class="inline-grid gap-1 p-2" style="grid-auto-flow:column;"></div>
    </div>

    <div id="legend" class="mt-4 text-sm text-gray-600">
      <span class="inline-flex items-center mr-4"><span class="w-4 h-4 bg-green-500 inline-block mr-2 rounded-sm"></span> Available</span>
      <span class="inline-flex items-center mr-4"><span class="w-4 h-4 bg-yellow-400 inline-block mr-2 rounded-sm"></span> Few left</span>
      <span class="inline-flex items-center"><span class="w-4 h-4 bg-red-500 inline-block mr-2 rounded-sm"></span> Full</span>
    </div>
  </section>

  <script client:load>
  (async () => {
    // ---------- helpers ----------
    const msDay = 24*60*60*1000;
    const calendarGrid = document.getElementById('calendarGrid');
    const calendarWrap = document.getElementById('calendarWrap');
    const prevBtn = document.getElementById('prevRange');
    const nextBtn = document.getElementById('nextRange');
    const rangeSelect = document.getElementById('rangeDays');
    const refreshBtn = document.getElementById('refreshBtn');
    const fromDateInput = document.getElementById('fromDate');

    function iso(d){ const dt = (d instanceof Date) ? d : new Date(d); return dt.toISOString().slice(0,10); }
    function parseYMD(s){ const p = s.split('-').map(Number); return new Date(p[0], p[1]-1, p[2]); }
    function addDays(d,n){ return new Date(d.getTime() + n*msDay); }
    function generateDates(start, days){ const arr=[]; for(let i=0;i<days;i++) arr.push(iso(addDays(start,i))); return arr; }

    // fetch inventory (fallback to defaults if API absent)
    async function fetchInventory(){
      try {
        const res = await fetch('/api/inventory');
        if(res.ok){ const j = await res.json(); return j; }
      } catch(e){}
      return {
        "standard": { label: "Standard Room", qty: 5 },
        "deluxe": { label: "Deluxe Room", qty: 2 },
        "family": { label: "Family Room", qty: 1 },
        "deluxeFamily": { label: "Deluxe Family Room", qty: 1 }
      };
    }

    // bookings for range from API
    async function fetchBookingsRange(startISO, endISO){
      try {
        const res = await fetch(`/api/bookings?start=${startISO}&end=${endISO}`);
        if(res.ok) return await res.json();
      } catch(e){ console.error('bookings fetch', e); }
      return [];
    }

    // compute counts per room per date
    function computeCounts(bookings, dates, inv){
      const counts = {};
      Object.keys(inv).forEach(k => { counts[k] = {}; dates.forEach(d=> counts[k][d]=0); });
      bookings.forEach(b=>{
        if(b.status==='cancelled') return;
        const ci = parseYMD(b.checkin), co = parseYMD(b.checkout);
        dates.forEach(d=>{
          const dd = parseYMD(d);
          if(dd >= ci && dd < co && counts[b.room] && typeof counts[b.room][d] === 'number'){
            counts[b.room][d] += 1;
          }
        });
      });
      return counts;
    }

    // render grid
    function renderCalendar(dates, inv, counts, bookings){
      calendarGrid.innerHTML = '';
      const keys = Object.keys(inv);
      // column widths: first label col then one per date
      const colTemplate = [`180px`, ...dates.map(()=>`110px`)].join(' ');
      calendarGrid.style.gridTemplateColumns = colTemplate;
      calendarGrid.style.display = 'grid';

      // header row
      const headLabel = document.createElement('div'); headLabel.className='p-2 font-semibold text-sm'; headLabel.textContent='Room / Date'; calendarGrid.appendChild(headLabel);
      dates.forEach(d=>{
        const h = document.createElement('div'); h.className='p-2 text-center text-sm font-semibold border-b';
        const dt = new Date(d);
        const dayShort = dt.toLocaleDateString(undefined,{weekday:'short'});
        const md = dt.toLocaleDateString(undefined,{month:'short',day:'numeric'});
        h.innerHTML = `<div class="text-xs text-gray-500">${dayShort}</div><div>${md}</div>`;
        calendarGrid.appendChild(h);
      });

      // rows
      keys.forEach(k=>{
        const labelCell = document.createElement('div'); labelCell.className='p-2 border-r font-medium';
        labelCell.innerHTML = `<div>${inv[k].label}</div><div class="text-xs text-gray-500">Qty: ${inv[k].qty}</div>`;
        calendarGrid.appendChild(labelCell);
        dates.forEach(d=>{
          const used = counts[k][d] || 0;
          const available = Math.max(0, (inv[k].qty||0) - used);
          const cell = document.createElement('div');
          cell.className='p-2 text-center text-sm align-middle border cursor-pointer select-none';
          cell.setAttribute('data-room', k); cell.setAttribute('data-date', d);
          // colors
          if(available === 0){ cell.style.backgroundColor = '#ef4444'; cell.style.color='white'; }
          else if(available <= 1){ cell.style.backgroundColor = '#f59e0b'; cell.style.color='white'; }
          else { cell.style.backgroundColor = '#10b981'; cell.style.color='white'; }
          cell.innerHTML = `<div class="text-sm font-semibold">${available}</div><div class="text-xs">${used}/${inv[k].qty}</div>`;
          cell.title = `${inv[k].label} â€” ${d}\nUsed: ${used}\nAvailable: ${available}`;

          // click opens small details panel (bookings for that day+room)
          cell.addEventListener('click', ()=>{
            const list = bookings.filter(b=>{
              return b.room===k && (parseYMD(d) >= parseYMD(b.checkin)) && (parseYMD(d) < parseYMD(b.checkout)) && b.status!=='cancelled';
            });
            let html = `<div style="font-family: system-ui, Arial, sans-serif; padding: 10px;"><h3>${inv[k].label} â€” ${d}</h3><p>Used: ${used} / ${inv[k].qty} â€” Available: ${available}</p><hr>`;
            if(list.length === 0) html += `<p>No bookings</p>`;
            else {
              html += '<ul>';
              list.forEach(b=>{
                html += `<li style="margin-bottom:8px;"><strong>${b.name||'(no name)'}</strong> â€” ${b.checkin} â†’ ${b.checkout} â€” â‚¹${b.total||0} â€” <em>${b.status||'pending'}</em><br/><small>${b.email||''} â€¢ ID: ${b.id}</small></li>`;
              });
              html += '</ul>';
            }
            html += '<p style="margin-top:8px;"><button id="openBookings" style="padding:8px 12px;border-radius:6px;background:#0ea5e9;color:#fff;border:none;cursor:pointer">Open Bookings List</button></p></div>';
            const w = window.open('','_blank','width=700,height=500');
            w.document.write(html);
            w.document.close();
            // optional: you could also navigate to admin bookings list and filter by date & room
          });

          calendarGrid.appendChild(cell);
        });
      });
    }

    // state & orchestration
    let startDate = new Date();
    function getDays(){ return parseInt(rangeSelect.value,10) || 14; }

    async function loadAndRender(){
      const days = getDays();
      const dates = generateDates(startDate, days);
      const startISO = dates[0];
      const endISO = iso(addDays(parseYMD(dates[dates.length-1]),1)); // exclusive
      const [inv, bookings] = await Promise.all([ fetchInventory(), fetchBookingsRange(startISO, endISO) ]);
      const counts = computeCounts(bookings, dates, inv);
      renderCalendar(dates, inv, counts, bookings);
      // set date input if not set
      if(!fromDateInput.value) fromDateInput.value = iso(startDate);
      // auto-scroll to left
      calendarWrap.scrollLeft = 0;
    }

    // controls
    prevBtn.addEventListener('click', ()=>{
      startDate = addDays(startDate, -getDays()); loadAndRender();
    });
    nextBtn.addEventListener('click', ()=>{
      startDate = addDays(startDate, getDays()); loadAndRender();
    });
    rangeSelect.addEventListener('change', ()=> loadAndRender());
    refreshBtn.addEventListener('click', ()=> loadAndRender());
    fromDateInput.addEventListener('change', ()=>{
      if(fromDateInput.value) startDate = parseYMD(fromDateInput.value);
      loadAndRender();
    });

    // initial load
    await loadAndRender();
  })();
  </script>

</Layout>
