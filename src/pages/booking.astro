---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Booking | Dolphin House">

  <section class="max-w-3xl mx-auto bg-white p-8 rounded-2xl shadow-lg mt-10 mb-20">
    <h1 class="text-3xl font-bold mb-4 text-center">Check Availability & Book</h1>

    <div class="space-y-4">
      <label>Check-in
        <input id="checkin" type="date" class="w-full border px-3 py-2 rounded"/>
      </label>
      <label>Check-out
        <input id="checkout" type="date" class="w-full border px-3 py-2 rounded"/>
      </label>
      <button id="checkBtn" class="bg-sky-600 text-white px-4 py-2 rounded w-full hover:bg-sky-700">Check Availability</button>
    </div>

    <div id="availability" class="mt-6 hidden">
      <h2 class="text-xl font-semibold mb-3">Available Room Types</h2>
      <div id="roomList" class="grid gap-4"></div>
    </div>
  </section>

  <script client:load>
    const checkBtn = document.getElementById('checkBtn');
    const availability = document.getElementById('availability');
    const roomList = document.getElementById('roomList');

    // Fetch inventory from API
    async function fetchInventory() {
      const res = await fetch('/api/inventory');
      if (!res.ok) throw new Error('Inventory API error');
      return await res.json();
    }

    // Fetch all bookings
    async function fetchBookings() {
      const res = await fetch('/api/bookings');
      if (!res.ok) throw new Error('Bookings API error');
      return await res.json();
    }

    function rangesOverlap(aStart,aEnd,bStart,bEnd){
      return (aStart < bEnd) && (bStart < aEnd);
    }

    function countBooked(bookings, roomType, checkin, checkout){
      const inD = new Date(checkin), outD = new Date(checkout);
      let c = 0;
      bookings.forEach(b => {
        if(b.room !== roomType || b.status === 'cancelled') return;
        const bi = new Date(b.checkin), bo = new Date(b.checkout);
        if(rangesOverlap(inD,outD,bi,bo)) c++;
      });
      return c;
    }

    function availableRooms(inventory, bookings, roomType, checkin, checkout) {
      const total = inventory[roomType]?.qty || 0;
      const reserved = countBooked(bookings, roomType, checkin, checkout);
      return Math.max(0, total - reserved);
    }

    checkBtn.addEventListener('click', async () => {
      const checkin = document.getElementById('checkin').value;
      const checkout = document.getElementById('checkout').value;
      if (!checkin || !checkout || new Date(checkin) >= new Date(checkout)) {
        alert('Please choose valid check-in and check-out dates.');
        return;
      }

      try {
        const inventory = await fetchInventory();
        const bookings = await fetchBookings();

        roomList.innerHTML = '';
        Object.keys(inventory).forEach(rt => {
          const avail = availableRooms(inventory, bookings, rt, checkin, checkout);
          const room = inventory[rt];
          const div = document.createElement('div');
          div.className = 'border rounded-lg p-4 flex justify-between items-center shadow-sm hover:shadow-md transition';
          div.innerHTML = `
            <div>
              <div class="text-lg font-semibold">${room.label}</div>
              <div class="text-sm text-gray-600">₹${room.rateNonAC} / night (Non-AC)</div>
              <div class="text-sm text-gray-600">₹${room.rateAC} / night (AC)</div>
              <div class="text-sm text-gray-500">Available: ${avail}</div>
            </div>
            <div>
              <button ${avail===0?'disabled':''} data-rt="${rt}" class="bg-sky-600 text-white px-4 py-2 rounded selectRoom hover:bg-sky-700">
                ${avail>0?'Select':'Sold Out'}
              </button>
            </div>
          `;
          roomList.appendChild(div);
        });

        availability.classList.remove('hidden');

        document.querySelectorAll('.selectRoom').forEach(btn => {
          btn.addEventListener('click', async () => {
            const roomType = btn.dataset.rt;
            const nights = (new Date(checkout) - new Date(checkin)) / (1000*60*60*24);
            const total = nights * (inventory[roomType].rateAC); // assume AC by default

            try {
              // create booking in D1 via API
              const res = await fetch('/api/bookings', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  room: roomType,
                  checkin,
                  checkout,
                  guests: 2,
                  nights,
                  total,
                  status: 'payment_pending'
                })
              });
              const data = await res.json();
              if (data.id) {
                window.location.href = `/pay/?bookingId=${data.id}`;
              } else {
                alert('Error creating booking.');
              }
            } catch (err) {
              console.error(err);
              alert('Network error creating booking.');
            }
          });
        });
      } catch (err) {
        console.error('Error loading data:', err);
        alert('Failed to load availability.');
      }
    });
  </script>
</Layout>
