---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Booking | Dolphin House">

  <section class="max-w-3xl mx-auto bg-white p-8 rounded-2xl shadow-lg mt-10 mb-20">
    <h1 class="text-3xl font-bold mb-4 text-center text-gray-800">Check Availability & Book</h1>
    <div id="errorBox" class="hidden bg-red-100 text-red-700 p-3 rounded-md mb-4 text-center"></div>

    <!-- Step 1: Date and Guest Count ONLY -->
    <div class="space-y-4 mb-8">
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Number of Guests</label>
        <input id="guestCount" type="number" min="1" max="10" value="2"
               class="w-full border px-3 py-2 rounded focus:ring-2 focus:ring-sky-400 focus:outline-none"/>
      </div>
      
      <label class="block">
        <span class="text-sm font-medium text-gray-700 mb-1">Check-in</span>
        <input id="checkin" type="date" class="w-full border px-3 py-2 rounded focus:ring-2 focus:ring-sky-400 focus:outline-none"/>
      </label>
      
      <label class="block">
        <span class="text-sm font-medium text-gray-700 mb-1">Check-out</span>
        <input id="checkout" type="date" class="w-full border px-3 py-2 rounded focus:ring-2 focus:ring-sky-400 focus:outline-none"/>
      </label>
      
      <button id="checkBtn" class="w-full bg-sky-600 text-white py-3 rounded-lg hover:bg-sky-700 transition font-semibold">
        Check Availability
      </button>
    </div>

    <!-- Step 2: Room selection -->
    <div id="availability" class="hidden mt-8">
      <h2 class="text-xl font-semibold mb-3 text-gray-800 text-center">Available Room Types</h2>
      <div id="roomList" class="grid gap-4"></div>
    </div>
  </section>

  <script>
    function showError(msg) {
      const box = document.getElementById('errorBox');
      box.textContent = msg;
      box.classList.remove('hidden');
    }

    async function fetchBookings() {
      try {
        const res = await fetch('/api/bookings');
        if (!res.ok) throw new Error(`Server returned ${res.status}`);
        return await res.json();
      } catch (err) {
        console.warn('⚠️ bookings API unavailable:', err);
        showError("We're unable to load current bookings – showing estimated availability.");
        return [];
      }
    }

    async function fetchInventory() {
      try {
        const res = await fetch('/api/inventory');
        if (!res.ok) throw new Error(`Server returned ${res.status}`);
        return await res.json();
      } catch (err) {
        console.warn('⚠️ inventory API unavailable:', err);
        showError("Inventory service is temporarily unavailable – using sample data for now.");
        return {
          standard: { label: "Standard Room", qty: 5, rateNonAC: 2000, rateAC: 2500 },
          deluxe: { label: "Deluxe Room", qty: 3, rateNonAC: 3000, rateAC: 3500 },
          suite: { label: "Suite Room", qty: 2, rateNonAC: 4500, rateAC: 5000 }
        };
      }
    }

    function rangesOverlap(aStart, aEnd, bStart, bEnd) {
      return (aStart < bEnd) && (bStart < aEnd);
    }

    function countBooked(bookings, roomType, checkin, checkout) {
      const inD = new Date(checkin);
      const outD = new Date(checkout);
      let c = 0;
      bookings.forEach(b => {
        if (b.room !== roomType || b.status === 'cancelled') return;
        const bi = new Date(b.checkin), bo = new Date(b.checkout);
        if (rangesOverlap(inD, outD, bi, bo)) c++;
      });
      return c;
    }

    function availableRooms(inv, bookings, rt, ci, co) {
      const total = inv[rt]?.qty || 0;
      const reserved = countBooked(bookings, rt, ci, co);
      return Math.max(0, total - reserved);
    }

    const checkBtn = document.getElementById('checkBtn');
    const availability = document.getElementById('availability');
    const roomList = document.getElementById('roomList');

    checkBtn.addEventListener('click', async () => {
      const guests = parseInt(document.getElementById('guestCount').value);
      const checkin = document.getElementById('checkin').value;
      const checkout = document.getElementById('checkout').value;

      // Only validate dates (no name/email validation)
      if (!checkin || !checkout || new Date(checkin) >= new Date(checkout)) {
        alert('Please choose valid check-in and check-out dates.');
        return;
      }

      const inv = await fetchInventory();
      const bookings = await fetchBookings();

      roomList.innerHTML = '';
      Object.keys(inv).forEach(rt => {
        const avail = availableRooms(inv, bookings, rt, checkin, checkout);
        const div = document.createElement('div');
        div.className = "border p-4 rounded-lg flex justify-between items-center bg-gray-50 hover:bg-white shadow-sm";
        div.innerHTML = `
          <div>
            <div class="text-lg font-semibold">${inv[rt].label}</div>
            <div class="text-sm text-gray-600">₹${inv[rt].rateNonAC} / night (Non-AC) | ₹${inv[rt].rateAC} / night (AC)</div>
            <div class="text-sm text-gray-500">Available: ${avail}</div>
          </div>
          <div class="flex gap-2">
            <button ${avail===0?'disabled':''} data-rt="${rt}" data-type="nonac"
              class="bg-sky-500 text-white px-4 py-2 rounded-md hover:bg-sky-600 disabled:opacity-40 selectRoom">
              Book Non-AC
            </button>
            <button ${avail===0?'disabled':''} data-rt="${rt}" data-type="ac"
              class="bg-teal-500 text-white px-4 py-2 rounded-md hover:bg-teal-600 disabled:opacity-40 selectRoom">
              Book AC
            </button>
          </div>`;
        roomList.appendChild(div);
      });

      availability.classList.remove('hidden');

      document.querySelectorAll('.selectRoom').forEach(btn => {
        btn.addEventListener('click', async () => {
          const rt = btn.dataset.rt;
          const type = btn.dataset.type;
          const rate = type === "ac" ? inv[rt].rateAC : inv[rt].rateNonAC;
          const nights = (new Date(checkout) - new Date(checkin)) / 86400000;
          const total = nights * rate;

          try {
            // Create booking WITHOUT name/email
            const res = await fetch('/api/bookings', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                name: '',
                email: '',
                room: rt,
                checkin, 
                checkout, 
                guests, 
                nights, 
                total, 
                status: 'payment_pending'
              })
            });
            
            if (!res.ok) {
              const error = await res.json();
              showError(error.error || 'Failed to create booking. Please try again.');
              return;
            }
            
            const data = await res.json();
            
            if (data.success && data.id && data.customerId) {
              // Pass booking details to payment page
              const params = new URLSearchParams({
                bookingId: data.id,
                customerId: data.customerId,
                room: rt,
                roomLabel: inv[rt].label,
                acType: type,
                checkin,
                checkout,
                guests: guests.toString(),
                nights: nights.toString(),
                total: total.toString()
              });
              window.location.href = `/pay?${params.toString()}`;
            } else {
              showError('Booking created but no ID returned. Please contact support.');
            }
          } catch (err) {
            console.error('Booking submission error:', err);
            showError('Network error. Please check your connection and try again.');
          }
        });
      });
    });
  </script>

</Layout>