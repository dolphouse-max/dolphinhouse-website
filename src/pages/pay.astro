---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Payment | Dolphin House">

  <section class="max-w-2xl mx-auto bg-white p-8 rounded-2xl shadow-lg mt-10 mb-20">
    <h1 class="text-2xl font-bold mb-4 text-gray-800">Complete Your Booking</h1>
    
    <!-- Booking Summary -->
    <div id="bookingSummary" class="mb-6 p-4 bg-sky-50 rounded-lg border border-sky-200"></div>

    <!-- Guest Details Form -->
    <form id="guestForm" class="space-y-4 mb-6">
      <h2 class="text-lg font-semibold text-gray-800 mb-3">Guest Details</h2>
      
      <label class="block">
        <span class="text-sm font-medium text-gray-700">Full Name <span class="text-red-500">*</span></span>
        <input id="name" type="text" class="w-full border px-3 py-2 rounded mt-1 focus:ring-2 focus:ring-sky-400 focus:outline-none" required placeholder="Enter your full name">
      </label>

      <!-- Mobile Number with OTP -->
      <label class="block">
        <span class="text-sm font-medium text-gray-700">Mobile Number <span class="text-red-500">*</span></span>
        <div class="flex gap-2">
          <input 
            id="mobile" 
            type="tel" 
            pattern="[0-9]{10}" 
            class="flex-1 border px-3 py-2 rounded mt-1 focus:ring-2 focus:ring-sky-400 focus:outline-none" 
            required 
            placeholder="10-digit mobile number"
          >
          <button 
            id="sendOtpBtn" 
            type="button"
            class="mt-1 bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition font-semibold whitespace-nowrap"
          >
            Send OTP
          </button>
        </div>
        <span class="text-xs text-gray-500">We'll send a verification code via SMS</span>
      </label>

      <!-- OTP Input (Hidden initially) -->
      <div id="otpSection" class="hidden">
        <label class="block">
          <span class="text-sm font-medium text-gray-700">Enter OTP <span class="text-red-500">*</span></span>
          <div class="flex gap-2">
            <input 
              id="otp" 
              type="text" 
              maxlength="6"
              pattern="[0-9]{6}"
              class="flex-1 border px-3 py-2 rounded mt-1 focus:ring-2 focus:ring-sky-400 focus:outline-none font-mono text-lg tracking-widest" 
              placeholder="Enter 6-digit OTP"
            >
            <button 
              id="verifyOtpBtn" 
              type="button"
              class="mt-1 bg-sky-600 text-white px-4 py-2 rounded hover:bg-sky-700 transition font-semibold"
            >
              Verify
            </button>
          </div>
          <span class="text-xs text-gray-500">OTP valid for 5 minutes</span>
        </label>
        <button 
          id="resendOtpBtn" 
          type="button"
          class="text-sm text-sky-600 underline hover:text-sky-700 mt-2"
        >
          Resend OTP
        </button>
      </div>

      <!-- Verification Status -->
      <div id="otpStatus" class="hidden mt-2 p-2 rounded"></div>

      <label class="block">
        <span class="text-sm font-medium text-gray-700">Email (Optional)</span>
        <input id="email" type="email" class="w-full border px-3 py-2 rounded mt-1 focus:ring-2 focus:ring-sky-400 focus:outline-none" placeholder="your@email.com">
      </label>

      <label class="block">
        <span class="text-sm font-medium text-gray-700">Number of Guests</span>
        <input id="guests" type="number" min="1" max="10" class="w-full border px-3 py-2 rounded mt-1" value="2">
      </label>
    </form>

    <!-- Payment Charges -->
    <div id="charges" class="mb-6 p-4 bg-gray-50 rounded border"></div>

    <!-- Payment QR Code -->
    <div class="text-center mb-6">
      <img id="gpay" src="/uploader/qr-code.webp" alt="Payment QR Code" class="mx-auto w-48 h-48 object-contain"/>
      <p class="text-sm text-gray-600 mt-2">Scan QR code and pay the amount shown above</p>
    </div>

    <!-- File Upload with Validation -->
    <div class="mb-6">
      <label class="block mb-2 text-sm font-medium text-gray-700">
        Upload Payment Screenshot <span class="text-red-500">*</span>
      </label>
      <input 
        id="screenshot" 
        type="file" 
        accept="image/*"
        class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-sky-50 file:text-sky-700 hover:file:bg-sky-100" 
      />
      <p class="text-xs text-gray-500 mt-1">Only image files (JPG, PNG, etc.) up to 5MB</p>
      <div id="preview" class="mt-4"></div>
      <div id="fileError" class="hidden text-red-600 text-sm mt-2"></div>
    </div>

    <!-- Action Buttons -->
    <div class="flex gap-4">
      <button id="confirmBtn" class="flex-1 bg-sky-600 text-white px-6 py-3 rounded-lg hover:bg-sky-700 transition font-semibold">
        Confirm Booking
      </button>
      <a href="/booking" class="flex-1 text-center border border-gray-300 px-6 py-3 rounded-lg hover:bg-gray-50 transition font-semibold">
        Cancel
      </a>
    </div>

    <p id="msg" class="text-green-600 mt-4 hidden text-center font-medium"></p>
  </section>

  <script>
    const params = new URLSearchParams(location.search);
    const bookingId = params.get('bookingId');
    const customerId = params.get('customerId');
    const room = params.get('room');
    const roomLabel = params.get('roomLabel');
    const acType = params.get('acType');
    const checkin = params.get('checkin');
    const checkout = params.get('checkout');
    const guests = parseInt(params.get('guests') || '2');
    const nights = parseInt(params.get('nights') || '1');
    const baseTotal = parseFloat(params.get('total') || '0');

    const summaryDiv = document.getElementById('bookingSummary');
    const chargesDiv = document.getElementById('charges');
    const guestsInput = document.getElementById('guests');
    const fileInput = document.getElementById('screenshot');
    const preview = document.getElementById('preview');
    const fileError = document.getElementById('fileError');

    let screenshotData = null;
    let mobileVerified = false;
    const extraPersonCharge = 700;

    // Display booking summary with Customer ID
    summaryDiv.innerHTML = `
      <div class="space-y-2">
        <div class="flex justify-between text-lg font-bold text-sky-700">
          <span>Customer ID:</span>
          <span class="font-mono">${customerId || 'N/A'}</span>
        </div>
        <div class="border-t pt-2">
          <div class="flex justify-between"><span class="font-medium">Room:</span><span>${roomLabel} (${acType.toUpperCase()})</span></div>
          <div class="flex justify-between"><span class="font-medium">Check-in:</span><span>${checkin}</span></div>
          <div class="flex justify-between"><span class="font-medium">Check-out:</span><span>${checkout}</span></div>
          <div class="flex justify-between"><span class="font-medium">Nights:</span><span>${nights}</span></div>
        </div>
      </div>
    `;

    function updateCharges() {
      const currentGuests = parseInt(guestsInput.value);
      const baseGuests = room.includes('family') ? 4 : 2;
      const extras = Math.max(0, currentGuests - baseGuests);
      const extraCharges = extras * extraPersonCharge * nights;
      const finalTotal = baseTotal + extraCharges;

      chargesDiv.innerHTML = `
        <div class="space-y-2">
          <div class="flex justify-between"><span>Room Charges:</span><span class="font-semibold">₹${baseTotal}</span></div>
          ${extras > 0 ? `<div class="flex justify-between text-sm"><span>Extra Person (${extras} × ₹${extraPersonCharge} × ${nights} nights):</span><span>₹${extraCharges}</span></div>` : ''}
          <div class="border-t pt-2 mt-2 flex justify-between text-lg"><span class="font-bold">Total Payable:</span><span class="font-bold text-sky-600">₹${finalTotal}</span></div>
        </div>
      `;
    }

    guestsInput.addEventListener('input', updateCharges);
    updateCharges();

    // File upload with validation
    fileInput.addEventListener('change', async (e) => {
      const file = e.target.files?.[0];
      if (!file) return;

      fileError.classList.add('hidden');
      preview.innerHTML = '';

      if (!file.type.startsWith('image/')) {
        fileError.textContent = '❌ Please upload only image files (JPG, PNG, etc.)';
        fileError.classList.remove('hidden');
        fileInput.value = '';
        return;
      }

      const maxSize = 5 * 1024 * 1024;
      if (file.size > maxSize) {
        fileError.textContent = '❌ Image must be smaller than 5MB. Please compress or choose another image.';
        fileError.classList.remove('hidden');
        fileInput.value = '';
        return;
      }

      const url = URL.createObjectURL(file);
      preview.innerHTML = `
        <div class="border rounded-lg p-2 bg-white">
          <p class="text-sm text-gray-600 mb-2">Preview:</p>
          <img src="${url}" class="max-w-full h-48 object-contain rounded-lg shadow mx-auto"/>
          <p class="text-xs text-gray-500 mt-2 text-center">${file.name} (${(file.size / 1024).toFixed(1)} KB)</p>
        </div>
      `;

      const reader = new FileReader();
      reader.onload = () => screenshotData = reader.result;
      reader.readAsDataURL(file);
    });

    // OTP Variables
    const mobileInput = document.getElementById('mobile');
    const sendOtpBtn = document.getElementById('sendOtpBtn');
    const otpSection = document.getElementById('otpSection');
    const otpInput = document.getElementById('otp');
    const verifyOtpBtn = document.getElementById('verifyOtpBtn');
    const resendOtpBtn = document.getElementById('resendOtpBtn');
    const otpStatus = document.getElementById('otpStatus');

    // Show OTP Status
    function showOtpStatus(message, type) {
      otpStatus.textContent = message;
      otpStatus.className = `mt-2 p-2 rounded ${type === 'success' ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`;
      otpStatus.classList.remove('hidden');
    }

    // Send OTP
    sendOtpBtn?.addEventListener('click', async () => {
      const mobile = mobileInput.value.trim();
      
      if (!mobile || !/^[6-9][0-9]{9}$/.test(mobile)) {
        showOtpStatus('Please enter a valid 10-digit mobile number', 'error');
        return;
      }

      sendOtpBtn.disabled = true;
      sendOtpBtn.textContent = 'Sending...';

      try {
        const res = await fetch('/api/send-otp', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ mobile })
        });

        const data = await res.json();

        if (data.success) {
          showOtpStatus('✅ OTP sent successfully! Check your SMS.', 'success');
          otpSection.classList.remove('hidden');
          mobileInput.disabled = true;
          sendOtpBtn.textContent = 'OTP Sent';
          otpInput.focus();
        } else {
          showOtpStatus(`❌ ${data.error}`, 'error');
          sendOtpBtn.disabled = false;
          sendOtpBtn.textContent = 'Send OTP';
        }
      } catch (err) {
        showOtpStatus('❌ Network error. Please try again.', 'error');
        sendOtpBtn.disabled = false;
        sendOtpBtn.textContent = 'Send OTP';
      }
    });

    // Verify OTP
    verifyOtpBtn?.addEventListener('click', async () => {
      const mobile = mobileInput.value.trim();
      const otp = otpInput.value.trim();

      if (!otp || otp.length !== 6) {
        showOtpStatus('Please enter 6-digit OTP', 'error');
        return;
      }

      verifyOtpBtn.disabled = true;
      verifyOtpBtn.textContent = 'Verifying...';

      try {
        const res = await fetch('/api/verify-otp', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ mobile, otp })
        });

        const data = await res.json();

        if (data.success) {
          showOtpStatus('✅ Mobile verified successfully!', 'success');
          mobileVerified = true;
          verifyOtpBtn.textContent = 'Verified ✓';
          verifyOtpBtn.classList.remove('bg-sky-600');
          verifyOtpBtn.classList.add('bg-green-600');
          verifyOtpBtn.disabled = true;
          otpInput.disabled = true;
          resendOtpBtn.classList.add('hidden');
        } else {
          showOtpStatus(`❌ ${data.error}`, 'error');
          verifyOtpBtn.disabled = false;
          verifyOtpBtn.textContent = 'Verify';
        }
      } catch (err) {
        showOtpStatus('❌ Network error. Please try again.', 'error');
        verifyOtpBtn.disabled = false;
        verifyOtpBtn.textContent = 'Verify';
      }
    });

    // Resend OTP
    resendOtpBtn?.addEventListener('click', () => {
      mobileInput.disabled = false;
      sendOtpBtn.disabled = false;
      sendOtpBtn.textContent = 'Resend OTP';
      otpInput.value = '';
      otpStatus.classList.add('hidden');
      sendOtpBtn.click();
    });

    // Confirm booking - SINGLE HANDLER
    document.getElementById('confirmBtn')?.addEventListener('click', async () => {
      const name = document.getElementById('name').value.trim();
      const mobile = mobileInput.value.trim();
      const email = document.getElementById('email').value.trim();

      // Validation
      if (!name) {
        alert('Please enter your full name');
        return;
      }

      if (!mobile || !/^[0-9]{10}$/.test(mobile)) {
        alert('Please enter a valid 10-digit mobile number');
        return;
      }

      // Check OTP verification
      if (!mobileVerified) {
        alert('Please verify your mobile number with OTP first');
        return;
      }

      if (!screenshotData) {
        alert('Please upload payment screenshot');
        return;
      }

      const currentGuests = parseInt(guestsInput.value);
      const baseGuests = room.includes('family') ? 4 : 2;
      const extras = Math.max(0, currentGuests - baseGuests);
      const extraCharges = extras * extraPersonCharge * nights;
      const finalTotal = baseTotal + extraCharges;

      try {
        const updateRes = await fetch('/api/bookings', {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            id: bookingId,
            name,
            email: email || '',
            mobile,
            guests: currentGuests,
            total: finalTotal,
            status: 'payment_submitted'
          })
        });

        if (!updateRes.ok) {
          throw new Error('Failed to update booking');
        }

        const msg = document.getElementById('msg');
        msg.innerHTML = `✅ Booking confirmed! Your Customer ID: <strong class="font-mono text-xl">${customerId}</strong><br><span class="text-sm">Please save this ID for future reference</span><br>Redirecting...`;
        msg.classList.remove('hidden');

        setTimeout(() => {
          window.location.href = `/thank-you?customerId=${customerId}&name=${encodeURIComponent(name)}`;
        }, 2000);

      } catch (err) {
        console.error('Booking confirmation error:', err);
        alert('Failed to confirm booking. Please try again or contact us at +91-8554871073');
      }
    });

    // Validate booking ID
    if (!bookingId || !customerId) {
      summaryDiv.innerHTML = '<p class="text-red-600">❌ Invalid booking. Please start from the booking page.</p>';
      document.getElementById('guestForm')?.remove();
      document.getElementById('confirmBtn')?.remove();
    }
  </script>
  
</Layout>